public class Product2Helper {

    /**
     * @name COLLABORATION_GROUP
     * @description List of CollaborationGroup used in both business and test logic
    **/
    static List<CollaborationGroup> COLLABORATION_GROUP = [
        SELECT Id
        FROM CollaborationGroup
        WHERE Name = :Constants.INVENTORY_ANNOUNCEMENTS
        OR Name = :('TEST'+ Constants.INVENTORY_ANNOUNCEMENTS)
        LIMIT 1
    ];

    /**
     * @name afterUpdate
     * @description called by product2 Trigger on After Update
     * @param List<Product2> newList
     * @param List<Product2> oldList
    **/
    public static void AfterUpdate(List<Product2> newList, List<Product2> oldList){
        //ToDo: Declare a List of Product2 records named needsAnnouncement
        List<Product2> needsAnnouncement = new List<Product2>();
        //ToDo: Declare a Map of Strings to Inventory_Setting__mdt records
		Map<String, Inventory_Setting__mdt> inventorySettings = Inventory_Setting__mdt.getAll();
        
        //ToDo: Loop through a query of Inventory_Setting__mdt records and populate the Map with Name as the key
        
        //ToDo: Loop through the Products in newList
        // Use the corresponding Inventory Setting record to determine the correct Low Quantity Alert
        // If the Product's Quantity Remaining has been changed to less than the Low Quantity Alert
        //      add it to the needsAnnouncement list
        for(Product2 newProd : newList){
            if(inventorySettings.get(newProd.Family) != null && newProd.Quantity_Remaining__c < inventorySettings.get(newProd.Family).Low_Quantity_Alert__c){
                needsAnnouncement.add(newProd);
            }
        }
		System.debug('Size of announcements is ' + needsAnnouncement.size());
        //ToDo: Pass records to the postAlerts method
        PostAlerts(needsAnnouncement);
    }

    /**
     * @name postAlerts
     * @description called by product2 Trigger on After Update
     * @param List<Product2> productList
    **/
    public static void PostAlerts(List<Product2> productList){
        List<ConnectApi.AnnouncementInput> toPost = new List<ConnectApi.AnnouncementInput>();
        for ( Product2 p : productList ){
            // ToDo: Construct a new AnnouncementInput for the Chatter Group so that it:
            ConnectApi.AnnouncementInput inPost = new ConnectApi.AnnouncementInput();
            // expires in a day
            inPost.expirationDate = System.today().addDays(1);
            // does not notify users via email.
            inPost.sendEmails = false;
            
            // and has a text body that includes the name of the product followed by the INVENTORY_LEVEL_LOW constant
        	ConnectApi.TextSegmentInput inText = new ConnectApi.TextSegmentInput();
            inText.text = p.Name + ' - ' + Constants.INVENTORY_LEVEL_LOW;
            
            ConnectApi.MessageBodyInput inMsg = new ConnectApi.MessageBodyInput();
            inMsg.messageSegments = new List<ConnectApi.TextSegmentInput>();
            inMsg.messageSegments.add(inText);
            
            inPost.body = inMsg;
            inPost.parentId = COLLABORATION_GROUP[0].Id;
        	toPost.add(inPost);
        }
        System.debug('Number of posts : ' + toPost.size());
        // ToDo: Create and enqueue an instance of the announcementQueuable class with the list of Products
        AnnouncementQueueable aq = new AnnouncementQueueable();
        aq.toPost = toPost;
        System.enqueueJob(aq);
    }
}